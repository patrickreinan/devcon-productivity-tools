input {
    kafka {
        bootstrap_servers => "kafka:9092"
        topics => ["orders.public.orders"]
        id => kafka
        auto_offset_reset => "earliest"
        codec => json


    }
}

filter {
    json {
        source => "message"


    }

    mutate {
        remove_field => ["schema","[payload][transaction]", "[payload][source]", "event", "[payload][ts_ms]"]



    }

    date {
        match => ["[payload][after][created_at]", "UNIX_MS"]
        target => "[payload][after][created_at]"
    }

    date {
        match => ["[payload][before][created_at]", "UNIX_MS"]
        target => "[payload][before][created_at]"
    }

    if [payload][op] == "c" {
        mutate {
            update => {
                "[payload][op]" => "create"
            }

        }

    }
   
    if [payload][op] == "u" {
        mutate {
            update => {
                "[payload][op]" => "update"
            }

        }

    }
    if [payload][op] == "d" {
        mutate {
            update => {
                "[payload][op]" => "delete"
            }

        }

    }
    if [payload][op] == "r" {
        mutate {
            update => {
                "[payload][op]" => "read"
            }

        }

    }
    if [payload][op] == "t" {
        mutate {
            update => {
                "[payload][op]" => "truncate"
            }

        }

    }
    if [payload][op] == "m" {
        mutate {
            update => {
                "[payload][op]" => "message"
            }

        }

    }



}

output {

# audit logs
    elasticsearch { 
        hosts => ["http://elastic:9200"]
        index => "orders-%{+YYYY.MM.dd}"
        codec => json

    }

#notify http
    http {
        http_method => "post"
        url => "https://eou6aw3b9tmtab9.m.pipedream.net/customers/%{[payload][after][customer_id]}/orders/%{[payload][after][id]}/notify/%{[payload][op]}"
        mapping => {}
    }


# default
    stdout {
        codec => json_lines
    }
}